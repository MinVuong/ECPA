
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: Feb 22 2025 23:16:25

// Verification Directory fv/csa_32 

module add_unsigned(A, B, Z);
  input A, B;
  output [1:0] Z;
  wire A, B;
  wire [1:0] Z;
  wire n_6;
  xor g1 (Z[0], A, B);
  nand g2 (n_6, A, B);
  not g7 (Z[1], n_6);
endmodule

module add_unsigned_2(A, B, Z);
  input [1:0] A;
  input B;
  output [1:0] Z;
  wire [1:0] A;
  wire B;
  wire [1:0] Z;
  wire n_7, n_12, n_16;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_7, A[0], B);
  xnor g12 (Z[1], n_12, n_16);
  not g15 (n_12, n_7);
  not g16 (n_16, A[1]);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [31:0] in_0, in_1;
  output [31:0] z;
  wire ctl;
  wire [31:0] in_0, in_1;
  wire [31:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_254(ctl, in_0, in_1, z);
  input ctl;
  input [30:0] in_0, in_1;
  output [30:0] z;
  wire ctl;
  wire [30:0] in_0, in_1;
  wire [30:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module bmux_255(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_257(ctl, in_0, in_1, z);
  input ctl;
  input [32:0] in_0, in_1;
  output [32:0] z;
  wire ctl;
  wire [32:0] in_0, in_1;
  wire [32:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[32]), .data1 (in_1[32]), .z
       (z[32]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[31]), .data1 (in_1[31]), .z
       (z[31]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[30]), .data1 (in_1[30]), .z
       (z[30]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[29]), .data1 (in_1[29]), .z
       (z[29]));
  CDN_bmux2 g5(.sel0 (ctl), .data0 (in_0[28]), .data1 (in_1[28]), .z
       (z[28]));
  CDN_bmux2 g6(.sel0 (ctl), .data0 (in_0[27]), .data1 (in_1[27]), .z
       (z[27]));
  CDN_bmux2 g7(.sel0 (ctl), .data0 (in_0[26]), .data1 (in_1[26]), .z
       (z[26]));
  CDN_bmux2 g8(.sel0 (ctl), .data0 (in_0[25]), .data1 (in_1[25]), .z
       (z[25]));
  CDN_bmux2 g9(.sel0 (ctl), .data0 (in_0[24]), .data1 (in_1[24]), .z
       (z[24]));
  CDN_bmux2 g10(.sel0 (ctl), .data0 (in_0[23]), .data1 (in_1[23]), .z
       (z[23]));
  CDN_bmux2 g11(.sel0 (ctl), .data0 (in_0[22]), .data1 (in_1[22]), .z
       (z[22]));
  CDN_bmux2 g12(.sel0 (ctl), .data0 (in_0[21]), .data1 (in_1[21]), .z
       (z[21]));
  CDN_bmux2 g13(.sel0 (ctl), .data0 (in_0[20]), .data1 (in_1[20]), .z
       (z[20]));
  CDN_bmux2 g14(.sel0 (ctl), .data0 (in_0[19]), .data1 (in_1[19]), .z
       (z[19]));
  CDN_bmux2 g15(.sel0 (ctl), .data0 (in_0[18]), .data1 (in_1[18]), .z
       (z[18]));
  CDN_bmux2 g16(.sel0 (ctl), .data0 (in_0[17]), .data1 (in_1[17]), .z
       (z[17]));
  CDN_bmux2 g17(.sel0 (ctl), .data0 (in_0[16]), .data1 (in_1[16]), .z
       (z[16]));
  CDN_bmux2 g18(.sel0 (ctl), .data0 (in_0[15]), .data1 (in_1[15]), .z
       (z[15]));
  CDN_bmux2 g19(.sel0 (ctl), .data0 (in_0[14]), .data1 (in_1[14]), .z
       (z[14]));
  CDN_bmux2 g20(.sel0 (ctl), .data0 (in_0[13]), .data1 (in_1[13]), .z
       (z[13]));
  CDN_bmux2 g21(.sel0 (ctl), .data0 (in_0[12]), .data1 (in_1[12]), .z
       (z[12]));
  CDN_bmux2 g22(.sel0 (ctl), .data0 (in_0[11]), .data1 (in_1[11]), .z
       (z[11]));
  CDN_bmux2 g23(.sel0 (ctl), .data0 (in_0[10]), .data1 (in_1[10]), .z
       (z[10]));
  CDN_bmux2 g24(.sel0 (ctl), .data0 (in_0[9]), .data1 (in_1[9]), .z
       (z[9]));
  CDN_bmux2 g25(.sel0 (ctl), .data0 (in_0[8]), .data1 (in_1[8]), .z
       (z[8]));
  CDN_bmux2 g26(.sel0 (ctl), .data0 (in_0[7]), .data1 (in_1[7]), .z
       (z[7]));
  CDN_bmux2 g27(.sel0 (ctl), .data0 (in_0[6]), .data1 (in_1[6]), .z
       (z[6]));
  CDN_bmux2 g28(.sel0 (ctl), .data0 (in_0[5]), .data1 (in_1[5]), .z
       (z[5]));
  CDN_bmux2 g29(.sel0 (ctl), .data0 (in_0[4]), .data1 (in_1[4]), .z
       (z[4]));
  CDN_bmux2 g30(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g31(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g32(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g33(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module csa_32(clk, rst_n, a, b, c, s, cout);
  input clk, rst_n;
  input [31:0] a, b, c;
  output [32:0] s;
  output cout;
  wire clk, rst_n;
  wire [31:0] a, b, c;
  wire [32:0] s;
  wire cout;
  wire [31:0] s1_reg;
  wire [31:0] c1_reg;
  wire [31:0] c2_reg;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6;
  wire UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, UNCONNECTED10,
       UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14;
  wire UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18,
       UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22;
  wire UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26,
       UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30;
  wire UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34,
       UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38;
  wire UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42,
       UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46;
  wire UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50,
       UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54;
  wire UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58,
       UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62;
  wire UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66,
       UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70;
  wire UNCONNECTED71, UNCONNECTED72, UNCONNECTED73, UNCONNECTED74,
       UNCONNECTED75, UNCONNECTED76, UNCONNECTED77, UNCONNECTED78;
  wire UNCONNECTED79, UNCONNECTED80, UNCONNECTED81, UNCONNECTED82,
       UNCONNECTED83, UNCONNECTED84, UNCONNECTED85, UNCONNECTED86;
  wire UNCONNECTED87, UNCONNECTED88, UNCONNECTED89, UNCONNECTED90,
       UNCONNECTED91, UNCONNECTED92, UNCONNECTED93, UNCONNECTED94;
  wire UNCONNECTED95, UNCONNECTED96, UNCONNECTED97, UNCONNECTED98,
       UNCONNECTED99, UNCONNECTED100, UNCONNECTED101, UNCONNECTED102;
  wire UNCONNECTED103, UNCONNECTED104, UNCONNECTED105, UNCONNECTED106,
       UNCONNECTED107, UNCONNECTED108, UNCONNECTED109, UNCONNECTED110;
  wire UNCONNECTED111, UNCONNECTED112, UNCONNECTED113, UNCONNECTED114,
       UNCONNECTED115, UNCONNECTED116, UNCONNECTED117, UNCONNECTED118;
  wire UNCONNECTED119, UNCONNECTED120, UNCONNECTED121, UNCONNECTED122,
       UNCONNECTED123, UNCONNECTED124, UNCONNECTED125, UNCONNECTED126;
  wire UNCONNECTED127, UNCONNECTED128, UNCONNECTED129, UNCONNECTED130,
       UNCONNECTED131, UNCONNECTED132, UNCONNECTED133, UNCONNECTED134;
  wire UNCONNECTED135, UNCONNECTED136, UNCONNECTED137, UNCONNECTED138,
       UNCONNECTED139, UNCONNECTED140, UNCONNECTED141, UNCONNECTED142;
  wire UNCONNECTED143, UNCONNECTED144, UNCONNECTED145, UNCONNECTED146,
       UNCONNECTED147, UNCONNECTED148, UNCONNECTED149, UNCONNECTED150;
  wire UNCONNECTED151, UNCONNECTED152, UNCONNECTED153, UNCONNECTED154,
       UNCONNECTED155, UNCONNECTED156, UNCONNECTED157, UNCONNECTED158;
  wire UNCONNECTED159, UNCONNECTED160, UNCONNECTED161, cout_reg_912,
       n_165, n_166, n_167, n_168;
  wire n_169, n_170, n_171, n_172, n_173, n_174, n_175, n_176;
  wire n_177, n_178, n_179, n_180, n_181, n_182, n_183, n_184;
  wire n_185, n_186, n_187, n_188, n_189, n_190, n_191, n_192;
  wire n_193, n_194, n_195, n_196, n_197, n_198, n_199, n_200;
  wire n_201, n_202, n_203, n_204, n_205, n_206, n_207, n_208;
  wire n_209, n_210, n_211, n_212, n_213, n_214, n_215, n_216;
  wire n_217, n_218, n_219, n_220, n_221, n_222, n_223, n_224;
  wire n_225, n_226, n_227, n_228, n_229, n_230, n_231, n_232;
  wire n_233, n_234, n_235, n_236, n_237, n_238, n_239, n_240;
  wire n_241, n_242, n_243, n_244, n_245, n_246, n_247, n_248;
  wire n_249, n_250, n_251, n_252, n_253, n_254, n_255, n_256;
  wire n_257, n_258, n_259, n_260, n_261, n_262, n_263, n_264;
  wire n_265, n_266, n_267, n_268, n_269, n_270, n_271, n_272;
  wire n_273, n_274, n_275, n_276, n_277, n_278, n_279, n_280;
  wire n_281, n_282, n_283, n_284, n_285, n_286, n_287, n_288;
  wire n_289, n_290, n_291, n_292, n_293, n_332, n_333, n_337;
  wire n_338, n_342, n_343, n_347, n_348, n_352, n_353, n_357;
  wire n_358, n_362, n_363, n_367, n_368, n_372, n_373, n_377;
  wire n_378, n_382, n_383, n_387, n_388, n_392, n_393, n_397;
  wire n_398, n_402, n_403, n_407, n_408, n_412, n_413, n_417;
  wire n_418, n_422, n_423, n_427, n_428, n_432, n_433, n_437;
  wire n_438, n_442, n_443, n_447, n_448, n_452, n_453, n_457;
  wire n_458, n_462, n_463, n_467, n_468, n_472, n_473, n_477;
  wire n_478, n_482, n_483, n_487, n_488, n_490, n_491, n_492;
  wire n_493, n_494, n_495, n_496, n_497, n_498, n_499, n_500;
  wire n_501, n_502, n_503, n_504, n_505, n_506, n_507, n_508;
  wire n_509, n_510, n_511, n_512, n_513, n_514, n_515, n_516;
  wire n_517, n_518, n_519, n_520, n_521, n_522, n_523, n_524;
  wire n_525, n_526, n_527, n_528, n_529, n_530, n_531, n_532;
  wire n_533, n_534, n_535, n_536, n_537, n_538, n_539, n_540;
  wire n_541, n_542, n_543, n_544, n_545, n_546, n_547, n_548;
  wire n_549, n_550, n_551, \s_reg[0]_813 , \s_reg[1]_814 ,
       \s_reg[2]_815 , \s_reg[3]_816 , \s_reg[4]_817 ;
  wire \s_reg[5]_818 , \s_reg[6]_819 , \s_reg[7]_820 , \s_reg[8]_821 ,
       \s_reg[9]_822 , \s_reg[10]_823 , \s_reg[11]_824 , \s_reg[12]_825
       ;
  wire \s_reg[13]_826 , \s_reg[14]_827 , \s_reg[15]_828 ,
       \s_reg[16]_829 , \s_reg[17]_830 , \s_reg[18]_831 ,
       \s_reg[19]_832 , \s_reg[20]_833 ;
  wire \s_reg[21]_834 , \s_reg[22]_835 , \s_reg[23]_836 ,
       \s_reg[24]_837 , \s_reg[25]_838 , \s_reg[26]_839 ,
       \s_reg[27]_840 , \s_reg[28]_841 ;
  wire \s_reg[29]_842 , \s_reg[30]_843 , \s_reg[31]_844 ,
       \s_reg[32]_845 ;
  add_unsigned add_21_48_I1(.A (a[0]), .B (b[0]), .Z ({n_333, n_332}));
  add_unsigned_2 add_21_55_I1(.A ({n_333, n_332}), .B (c[0]), .Z
       ({n_198, n_166}));
  add_unsigned add_21_48_I2(.A (a[1]), .B (b[1]), .Z ({n_338, n_337}));
  add_unsigned_2 add_21_55_I2(.A ({n_338, n_337}), .B (c[1]), .Z
       ({n_199, n_167}));
  add_unsigned add_21_48_I3(.A (a[2]), .B (b[2]), .Z ({n_343, n_342}));
  add_unsigned_2 add_21_55_I3(.A ({n_343, n_342}), .B (c[2]), .Z
       ({n_200, n_168}));
  add_unsigned add_21_48_I4(.A (a[3]), .B (b[3]), .Z ({n_348, n_347}));
  add_unsigned_2 add_21_55_I4(.A ({n_348, n_347}), .B (c[3]), .Z
       ({n_201, n_169}));
  add_unsigned add_21_48_I5(.A (a[4]), .B (b[4]), .Z ({n_353, n_352}));
  add_unsigned_2 add_21_55_I5(.A ({n_353, n_352}), .B (c[4]), .Z
       ({n_202, n_170}));
  add_unsigned add_21_48_I6(.A (a[5]), .B (b[5]), .Z ({n_358, n_357}));
  add_unsigned_2 add_21_55_I6(.A ({n_358, n_357}), .B (c[5]), .Z
       ({n_203, n_171}));
  add_unsigned add_21_48_I7(.A (a[6]), .B (b[6]), .Z ({n_363, n_362}));
  add_unsigned_2 add_21_55_I7(.A ({n_363, n_362}), .B (c[6]), .Z
       ({n_204, n_172}));
  add_unsigned add_21_48_I8(.A (a[7]), .B (b[7]), .Z ({n_368, n_367}));
  add_unsigned_2 add_21_55_I8(.A ({n_368, n_367}), .B (c[7]), .Z
       ({n_205, n_173}));
  add_unsigned add_21_48_I9(.A (a[8]), .B (b[8]), .Z ({n_373, n_372}));
  add_unsigned_2 add_21_55_I9(.A ({n_373, n_372}), .B (c[8]), .Z
       ({n_206, n_174}));
  add_unsigned add_21_48_I10(.A (a[9]), .B (b[9]), .Z ({n_378, n_377}));
  add_unsigned_2 add_21_55_I10(.A ({n_378, n_377}), .B (c[9]), .Z
       ({n_207, n_175}));
  add_unsigned add_21_48_I11(.A (a[10]), .B (b[10]), .Z ({n_383,
       n_382}));
  add_unsigned_2 add_21_55_I11(.A ({n_383, n_382}), .B (c[10]), .Z
       ({n_208, n_176}));
  add_unsigned add_21_48_I12(.A (a[11]), .B (b[11]), .Z ({n_388,
       n_387}));
  add_unsigned_2 add_21_55_I12(.A ({n_388, n_387}), .B (c[11]), .Z
       ({n_209, n_177}));
  add_unsigned add_21_48_I13(.A (a[12]), .B (b[12]), .Z ({n_393,
       n_392}));
  add_unsigned_2 add_21_55_I13(.A ({n_393, n_392}), .B (c[12]), .Z
       ({n_210, n_178}));
  add_unsigned add_21_48_I14(.A (a[13]), .B (b[13]), .Z ({n_398,
       n_397}));
  add_unsigned_2 add_21_55_I14(.A ({n_398, n_397}), .B (c[13]), .Z
       ({n_211, n_179}));
  add_unsigned add_21_48_I15(.A (a[14]), .B (b[14]), .Z ({n_403,
       n_402}));
  add_unsigned_2 add_21_55_I15(.A ({n_403, n_402}), .B (c[14]), .Z
       ({n_212, n_180}));
  add_unsigned add_21_48_I16(.A (a[15]), .B (b[15]), .Z ({n_408,
       n_407}));
  add_unsigned_2 add_21_55_I16(.A ({n_408, n_407}), .B (c[15]), .Z
       ({n_213, n_181}));
  add_unsigned add_21_48_I17(.A (a[16]), .B (b[16]), .Z ({n_413,
       n_412}));
  add_unsigned_2 add_21_55_I17(.A ({n_413, n_412}), .B (c[16]), .Z
       ({n_214, n_182}));
  add_unsigned add_21_48_I18(.A (a[17]), .B (b[17]), .Z ({n_418,
       n_417}));
  add_unsigned_2 add_21_55_I18(.A ({n_418, n_417}), .B (c[17]), .Z
       ({n_215, n_183}));
  add_unsigned add_21_48_I19(.A (a[18]), .B (b[18]), .Z ({n_423,
       n_422}));
  add_unsigned_2 add_21_55_I19(.A ({n_423, n_422}), .B (c[18]), .Z
       ({n_216, n_184}));
  add_unsigned add_21_48_I20(.A (a[19]), .B (b[19]), .Z ({n_428,
       n_427}));
  add_unsigned_2 add_21_55_I20(.A ({n_428, n_427}), .B (c[19]), .Z
       ({n_217, n_185}));
  add_unsigned add_21_48_I21(.A (a[20]), .B (b[20]), .Z ({n_433,
       n_432}));
  add_unsigned_2 add_21_55_I21(.A ({n_433, n_432}), .B (c[20]), .Z
       ({n_218, n_186}));
  add_unsigned add_21_48_I22(.A (a[21]), .B (b[21]), .Z ({n_438,
       n_437}));
  add_unsigned_2 add_21_55_I22(.A ({n_438, n_437}), .B (c[21]), .Z
       ({n_219, n_187}));
  add_unsigned add_21_48_I23(.A (a[22]), .B (b[22]), .Z ({n_443,
       n_442}));
  add_unsigned_2 add_21_55_I23(.A ({n_443, n_442}), .B (c[22]), .Z
       ({n_220, n_188}));
  add_unsigned add_21_48_I24(.A (a[23]), .B (b[23]), .Z ({n_448,
       n_447}));
  add_unsigned_2 add_21_55_I24(.A ({n_448, n_447}), .B (c[23]), .Z
       ({n_221, n_189}));
  add_unsigned add_21_48_I25(.A (a[24]), .B (b[24]), .Z ({n_453,
       n_452}));
  add_unsigned_2 add_21_55_I25(.A ({n_453, n_452}), .B (c[24]), .Z
       ({n_222, n_190}));
  add_unsigned add_21_48_I26(.A (a[25]), .B (b[25]), .Z ({n_458,
       n_457}));
  add_unsigned_2 add_21_55_I26(.A ({n_458, n_457}), .B (c[25]), .Z
       ({n_223, n_191}));
  add_unsigned add_21_48_I27(.A (a[26]), .B (b[26]), .Z ({n_463,
       n_462}));
  add_unsigned_2 add_21_55_I27(.A ({n_463, n_462}), .B (c[26]), .Z
       ({n_224, n_192}));
  add_unsigned add_21_48_I28(.A (a[27]), .B (b[27]), .Z ({n_468,
       n_467}));
  add_unsigned_2 add_21_55_I28(.A ({n_468, n_467}), .B (c[27]), .Z
       ({n_225, n_193}));
  add_unsigned add_21_48_I29(.A (a[28]), .B (b[28]), .Z ({n_473,
       n_472}));
  add_unsigned_2 add_21_55_I29(.A ({n_473, n_472}), .B (c[28]), .Z
       ({n_226, n_194}));
  add_unsigned add_21_48_I30(.A (a[29]), .B (b[29]), .Z ({n_478,
       n_477}));
  add_unsigned_2 add_21_55_I30(.A ({n_478, n_477}), .B (c[29]), .Z
       ({n_227, n_195}));
  add_unsigned add_21_48_I31(.A (a[30]), .B (b[30]), .Z ({n_483,
       n_482}));
  add_unsigned_2 add_21_55_I31(.A ({n_483, n_482}), .B (c[30]), .Z
       ({n_228, n_196}));
  add_unsigned add_21_48_I32(.A (a[31]), .B (b[31]), .Z ({n_488,
       n_487}));
  add_unsigned_2 add_21_55_I32(.A ({n_488, n_487}), .B (c[31]), .Z
       ({n_229, n_197}));
  add_unsigned add_34_48(.A (s1_reg[1]), .B (c1_reg[0]), .Z ({n_230,
       n_262}));
  add_unsigned add_36_52_I1(.A (s1_reg[2]), .B (c1_reg[1]), .Z ({n_491,
       n_490}));
  add_unsigned_2 add_36_66_I1(.A ({n_491, n_490}), .B (c2_reg[1]), .Z
       ({n_231, n_263}));
  add_unsigned add_36_52_I2(.A (s1_reg[3]), .B (c1_reg[2]), .Z ({n_493,
       n_492}));
  add_unsigned_2 add_36_66_I2(.A ({n_493, n_492}), .B (c2_reg[2]), .Z
       ({n_232, n_264}));
  add_unsigned add_36_52_I3(.A (s1_reg[4]), .B (c1_reg[3]), .Z ({n_495,
       n_494}));
  add_unsigned_2 add_36_66_I3(.A ({n_495, n_494}), .B (c2_reg[3]), .Z
       ({n_233, n_265}));
  add_unsigned add_36_52_I4(.A (s1_reg[5]), .B (c1_reg[4]), .Z ({n_497,
       n_496}));
  add_unsigned_2 add_36_66_I4(.A ({n_497, n_496}), .B (c2_reg[4]), .Z
       ({n_234, n_266}));
  add_unsigned add_36_52_I5(.A (s1_reg[6]), .B (c1_reg[5]), .Z ({n_499,
       n_498}));
  add_unsigned_2 add_36_66_I5(.A ({n_499, n_498}), .B (c2_reg[5]), .Z
       ({n_235, n_267}));
  add_unsigned add_36_52_I6(.A (s1_reg[7]), .B (c1_reg[6]), .Z ({n_501,
       n_500}));
  add_unsigned_2 add_36_66_I6(.A ({n_501, n_500}), .B (c2_reg[6]), .Z
       ({n_236, n_268}));
  add_unsigned add_36_52_I7(.A (s1_reg[8]), .B (c1_reg[7]), .Z ({n_503,
       n_502}));
  add_unsigned_2 add_36_66_I7(.A ({n_503, n_502}), .B (c2_reg[7]), .Z
       ({n_237, n_269}));
  add_unsigned add_36_52_I8(.A (s1_reg[9]), .B (c1_reg[8]), .Z ({n_505,
       n_504}));
  add_unsigned_2 add_36_66_I8(.A ({n_505, n_504}), .B (c2_reg[8]), .Z
       ({n_238, n_270}));
  add_unsigned add_36_52_I9(.A (s1_reg[10]), .B (c1_reg[9]), .Z
       ({n_507, n_506}));
  add_unsigned_2 add_36_66_I9(.A ({n_507, n_506}), .B (c2_reg[9]), .Z
       ({n_239, n_271}));
  add_unsigned add_36_52_I10(.A (s1_reg[11]), .B (c1_reg[10]), .Z
       ({n_509, n_508}));
  add_unsigned_2 add_36_66_I10(.A ({n_509, n_508}), .B (c2_reg[10]), .Z
       ({n_240, n_272}));
  add_unsigned add_36_52_I11(.A (s1_reg[12]), .B (c1_reg[11]), .Z
       ({n_511, n_510}));
  add_unsigned_2 add_36_66_I11(.A ({n_511, n_510}), .B (c2_reg[11]), .Z
       ({n_241, n_273}));
  add_unsigned add_36_52_I12(.A (s1_reg[13]), .B (c1_reg[12]), .Z
       ({n_513, n_512}));
  add_unsigned_2 add_36_66_I12(.A ({n_513, n_512}), .B (c2_reg[12]), .Z
       ({n_242, n_274}));
  add_unsigned add_36_52_I13(.A (s1_reg[14]), .B (c1_reg[13]), .Z
       ({n_515, n_514}));
  add_unsigned_2 add_36_66_I13(.A ({n_515, n_514}), .B (c2_reg[13]), .Z
       ({n_243, n_275}));
  add_unsigned add_36_52_I14(.A (s1_reg[15]), .B (c1_reg[14]), .Z
       ({n_517, n_516}));
  add_unsigned_2 add_36_66_I14(.A ({n_517, n_516}), .B (c2_reg[14]), .Z
       ({n_244, n_276}));
  add_unsigned add_36_52_I15(.A (s1_reg[16]), .B (c1_reg[15]), .Z
       ({n_519, n_518}));
  add_unsigned_2 add_36_66_I15(.A ({n_519, n_518}), .B (c2_reg[15]), .Z
       ({n_245, n_277}));
  add_unsigned add_36_52_I16(.A (s1_reg[17]), .B (c1_reg[16]), .Z
       ({n_521, n_520}));
  add_unsigned_2 add_36_66_I16(.A ({n_521, n_520}), .B (c2_reg[16]), .Z
       ({n_246, n_278}));
  add_unsigned add_36_52_I17(.A (s1_reg[18]), .B (c1_reg[17]), .Z
       ({n_523, n_522}));
  add_unsigned_2 add_36_66_I17(.A ({n_523, n_522}), .B (c2_reg[17]), .Z
       ({n_247, n_279}));
  add_unsigned add_36_52_I18(.A (s1_reg[19]), .B (c1_reg[18]), .Z
       ({n_525, n_524}));
  add_unsigned_2 add_36_66_I18(.A ({n_525, n_524}), .B (c2_reg[18]), .Z
       ({n_248, n_280}));
  add_unsigned add_36_52_I19(.A (s1_reg[20]), .B (c1_reg[19]), .Z
       ({n_527, n_526}));
  add_unsigned_2 add_36_66_I19(.A ({n_527, n_526}), .B (c2_reg[19]), .Z
       ({n_249, n_281}));
  add_unsigned add_36_52_I20(.A (s1_reg[21]), .B (c1_reg[20]), .Z
       ({n_529, n_528}));
  add_unsigned_2 add_36_66_I20(.A ({n_529, n_528}), .B (c2_reg[20]), .Z
       ({n_250, n_282}));
  add_unsigned add_36_52_I21(.A (s1_reg[22]), .B (c1_reg[21]), .Z
       ({n_531, n_530}));
  add_unsigned_2 add_36_66_I21(.A ({n_531, n_530}), .B (c2_reg[21]), .Z
       ({n_251, n_283}));
  add_unsigned add_36_52_I22(.A (s1_reg[23]), .B (c1_reg[22]), .Z
       ({n_533, n_532}));
  add_unsigned_2 add_36_66_I22(.A ({n_533, n_532}), .B (c2_reg[22]), .Z
       ({n_252, n_284}));
  add_unsigned add_36_52_I23(.A (s1_reg[24]), .B (c1_reg[23]), .Z
       ({n_535, n_534}));
  add_unsigned_2 add_36_66_I23(.A ({n_535, n_534}), .B (c2_reg[23]), .Z
       ({n_253, n_285}));
  add_unsigned add_36_52_I24(.A (s1_reg[25]), .B (c1_reg[24]), .Z
       ({n_537, n_536}));
  add_unsigned_2 add_36_66_I24(.A ({n_537, n_536}), .B (c2_reg[24]), .Z
       ({n_254, n_286}));
  add_unsigned add_36_52_I25(.A (s1_reg[26]), .B (c1_reg[25]), .Z
       ({n_539, n_538}));
  add_unsigned_2 add_36_66_I25(.A ({n_539, n_538}), .B (c2_reg[25]), .Z
       ({n_255, n_287}));
  add_unsigned add_36_52_I26(.A (s1_reg[27]), .B (c1_reg[26]), .Z
       ({n_541, n_540}));
  add_unsigned_2 add_36_66_I26(.A ({n_541, n_540}), .B (c2_reg[26]), .Z
       ({n_256, n_288}));
  add_unsigned add_36_52_I27(.A (s1_reg[28]), .B (c1_reg[27]), .Z
       ({n_543, n_542}));
  add_unsigned_2 add_36_66_I27(.A ({n_543, n_542}), .B (c2_reg[27]), .Z
       ({n_257, n_289}));
  add_unsigned add_36_52_I28(.A (s1_reg[29]), .B (c1_reg[28]), .Z
       ({n_545, n_544}));
  add_unsigned_2 add_36_66_I28(.A ({n_545, n_544}), .B (c2_reg[28]), .Z
       ({n_258, n_290}));
  add_unsigned add_36_52_I29(.A (s1_reg[30]), .B (c1_reg[29]), .Z
       ({n_547, n_546}));
  add_unsigned_2 add_36_66_I29(.A ({n_547, n_546}), .B (c2_reg[29]), .Z
       ({n_259, n_291}));
  add_unsigned add_36_52_I30(.A (s1_reg[31]), .B (c1_reg[30]), .Z
       ({n_549, n_548}));
  add_unsigned_2 add_36_66_I30(.A ({n_549, n_548}), .B (c2_reg[30]), .Z
       ({n_260, n_292}));
  add_unsigned add_38_49(.A (s1_reg[31]), .B (c1_reg[31]), .Z ({n_551,
       n_550}));
  add_unsigned_2 add_38_62(.A ({n_551, n_550}), .B (c2_reg[31]), .Z
       ({n_261, n_293}));
  bmux mux_s1_reg_15_13(.ctl (n_165), .in_0 ({n_197, n_196, n_195,
       n_194, n_193, n_192, n_191, n_190, n_189, n_188, n_187, n_186,
       n_185, n_184, n_183, n_182, n_181, n_180, n_179, n_178, n_177,
       n_176, n_175, n_174, n_173, n_172, n_171, n_170, n_169, n_168,
       n_167, n_166}), .in_1 (32'b00000000000000000000000000000000), .z
       ({UNCONNECTED30, UNCONNECTED29, UNCONNECTED28, UNCONNECTED27,
       UNCONNECTED26, UNCONNECTED25, UNCONNECTED24, UNCONNECTED23,
       UNCONNECTED22, UNCONNECTED21, UNCONNECTED20, UNCONNECTED19,
       UNCONNECTED18, UNCONNECTED17, UNCONNECTED16, UNCONNECTED15,
       UNCONNECTED14, UNCONNECTED13, UNCONNECTED12, UNCONNECTED11,
       UNCONNECTED10, UNCONNECTED9, UNCONNECTED8, UNCONNECTED7,
       UNCONNECTED6, UNCONNECTED5, UNCONNECTED4, UNCONNECTED3,
       UNCONNECTED2, UNCONNECTED1, UNCONNECTED0, UNCONNECTED}));
  bmux mux_c1_reg_15_13(.ctl (n_165), .in_0 ({n_229, n_228, n_227,
       n_226, n_225, n_224, n_223, n_222, n_221, n_220, n_219, n_218,
       n_217, n_216, n_215, n_214, n_213, n_212, n_211, n_210, n_209,
       n_208, n_207, n_206, n_205, n_204, n_203, n_202, n_201, n_200,
       n_199, n_198}), .in_1 (32'b00000000000000000000000000000000), .z
       ({UNCONNECTED62, UNCONNECTED61, UNCONNECTED60, UNCONNECTED59,
       UNCONNECTED58, UNCONNECTED57, UNCONNECTED56, UNCONNECTED55,
       UNCONNECTED54, UNCONNECTED53, UNCONNECTED52, UNCONNECTED51,
       UNCONNECTED50, UNCONNECTED49, UNCONNECTED48, UNCONNECTED47,
       UNCONNECTED46, UNCONNECTED45, UNCONNECTED44, UNCONNECTED43,
       UNCONNECTED42, UNCONNECTED41, UNCONNECTED40, UNCONNECTED39,
       UNCONNECTED38, UNCONNECTED37, UNCONNECTED36, UNCONNECTED35,
       UNCONNECTED34, UNCONNECTED33, UNCONNECTED32, UNCONNECTED31}));
  bmux_254 mux_c2_reg_27_13(.ctl (n_165), .in_0 ({n_260, n_259, n_258,
       n_257, n_256, n_255, n_254, n_253, n_252, n_251, n_250, n_249,
       n_248, n_247, n_246, n_245, n_244, n_243, n_242, n_241, n_240,
       n_239, n_238, n_237, n_236, n_235, n_234, n_233, n_232, n_231,
       n_230}), .in_1 (31'b0000000000000000000000000000000), .z
       ({UNCONNECTED93, UNCONNECTED92, UNCONNECTED91, UNCONNECTED90,
       UNCONNECTED89, UNCONNECTED88, UNCONNECTED87, UNCONNECTED86,
       UNCONNECTED85, UNCONNECTED84, UNCONNECTED83, UNCONNECTED82,
       UNCONNECTED81, UNCONNECTED80, UNCONNECTED79, UNCONNECTED78,
       UNCONNECTED77, UNCONNECTED76, UNCONNECTED75, UNCONNECTED74,
       UNCONNECTED73, UNCONNECTED72, UNCONNECTED71, UNCONNECTED70,
       UNCONNECTED69, UNCONNECTED68, UNCONNECTED67, UNCONNECTED66,
       UNCONNECTED65, UNCONNECTED64, UNCONNECTED63}));
  bmux_255 mux_cout_reg_27_13(.ctl (n_165), .in_0 (n_261), .in_1
       (1'b0), .z (UNCONNECTED94));
  bmux_255 mux_cout_44_13(.ctl (n_165), .in_0 (cout_reg_912), .in_1
       (1'b0), .z (UNCONNECTED95));
  bmux_257 mux_s_reg_27_13(.ctl (n_165), .in_0 ({n_293, n_292, n_291,
       n_290, n_289, n_288, n_287, n_286, n_285, n_284, n_283, n_282,
       n_281, n_280, n_279, n_278, n_277, n_276, n_275, n_274, n_273,
       n_272, n_271, n_270, n_269, n_268, n_267, n_266, n_265, n_264,
       n_263, n_262, s1_reg[0]}), .in_1
       (33'b000000000000000000000000000000000), .z ({UNCONNECTED128,
       UNCONNECTED127, UNCONNECTED126, UNCONNECTED125, UNCONNECTED124,
       UNCONNECTED123, UNCONNECTED122, UNCONNECTED121, UNCONNECTED120,
       UNCONNECTED119, UNCONNECTED118, UNCONNECTED117, UNCONNECTED116,
       UNCONNECTED115, UNCONNECTED114, UNCONNECTED113, UNCONNECTED112,
       UNCONNECTED111, UNCONNECTED110, UNCONNECTED109, UNCONNECTED108,
       UNCONNECTED107, UNCONNECTED106, UNCONNECTED105, UNCONNECTED104,
       UNCONNECTED103, UNCONNECTED102, UNCONNECTED101, UNCONNECTED100,
       UNCONNECTED99, UNCONNECTED98, UNCONNECTED97, UNCONNECTED96}));
  bmux_257 mux_s_44_13(.ctl (n_165), .in_0 ({\s_reg[32]_845 ,
       \s_reg[31]_844 , \s_reg[30]_843 , \s_reg[29]_842 ,
       \s_reg[28]_841 , \s_reg[27]_840 , \s_reg[26]_839 ,
       \s_reg[25]_838 , \s_reg[24]_837 , \s_reg[23]_836 ,
       \s_reg[22]_835 , \s_reg[21]_834 , \s_reg[20]_833 ,
       \s_reg[19]_832 , \s_reg[18]_831 , \s_reg[17]_830 ,
       \s_reg[16]_829 , \s_reg[15]_828 , \s_reg[14]_827 ,
       \s_reg[13]_826 , \s_reg[12]_825 , \s_reg[11]_824 ,
       \s_reg[10]_823 , \s_reg[9]_822 , \s_reg[8]_821 , \s_reg[7]_820 ,
       \s_reg[6]_819 , \s_reg[5]_818 , \s_reg[4]_817 , \s_reg[3]_816 ,
       \s_reg[2]_815 , \s_reg[1]_814 , \s_reg[0]_813 }), .in_1
       (33'b000000000000000000000000000000000), .z ({UNCONNECTED161,
       UNCONNECTED160, UNCONNECTED159, UNCONNECTED158, UNCONNECTED157,
       UNCONNECTED156, UNCONNECTED155, UNCONNECTED154, UNCONNECTED153,
       UNCONNECTED152, UNCONNECTED151, UNCONNECTED150, UNCONNECTED149,
       UNCONNECTED148, UNCONNECTED147, UNCONNECTED146, UNCONNECTED145,
       UNCONNECTED144, UNCONNECTED143, UNCONNECTED142, UNCONNECTED141,
       UNCONNECTED140, UNCONNECTED139, UNCONNECTED138, UNCONNECTED137,
       UNCONNECTED136, UNCONNECTED135, UNCONNECTED134, UNCONNECTED133,
       UNCONNECTED132, UNCONNECTED131, UNCONNECTED130,
       UNCONNECTED129}));
  not g1 (n_165, rst_n);
  CDN_flop \s1_reg_reg[0] (.clk (clk), .d (n_166), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[0]));
  CDN_flop \s1_reg_reg[1] (.clk (clk), .d (n_167), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[1]));
  CDN_flop \s1_reg_reg[2] (.clk (clk), .d (n_168), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[2]));
  CDN_flop \s1_reg_reg[3] (.clk (clk), .d (n_169), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[3]));
  CDN_flop \s1_reg_reg[4] (.clk (clk), .d (n_170), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[4]));
  CDN_flop \s1_reg_reg[5] (.clk (clk), .d (n_171), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[5]));
  CDN_flop \s1_reg_reg[6] (.clk (clk), .d (n_172), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[6]));
  CDN_flop \s1_reg_reg[7] (.clk (clk), .d (n_173), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[7]));
  CDN_flop \s1_reg_reg[8] (.clk (clk), .d (n_174), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[8]));
  CDN_flop \s1_reg_reg[9] (.clk (clk), .d (n_175), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (s1_reg[9]));
  CDN_flop \s1_reg_reg[10] (.clk (clk), .d (n_176), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[10]));
  CDN_flop \s1_reg_reg[11] (.clk (clk), .d (n_177), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[11]));
  CDN_flop \s1_reg_reg[12] (.clk (clk), .d (n_178), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[12]));
  CDN_flop \s1_reg_reg[13] (.clk (clk), .d (n_179), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[13]));
  CDN_flop \s1_reg_reg[14] (.clk (clk), .d (n_180), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[14]));
  CDN_flop \s1_reg_reg[15] (.clk (clk), .d (n_181), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[15]));
  CDN_flop \s1_reg_reg[16] (.clk (clk), .d (n_182), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[16]));
  CDN_flop \s1_reg_reg[17] (.clk (clk), .d (n_183), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[17]));
  CDN_flop \s1_reg_reg[18] (.clk (clk), .d (n_184), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[18]));
  CDN_flop \s1_reg_reg[19] (.clk (clk), .d (n_185), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[19]));
  CDN_flop \s1_reg_reg[20] (.clk (clk), .d (n_186), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[20]));
  CDN_flop \s1_reg_reg[21] (.clk (clk), .d (n_187), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[21]));
  CDN_flop \s1_reg_reg[22] (.clk (clk), .d (n_188), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[22]));
  CDN_flop \s1_reg_reg[23] (.clk (clk), .d (n_189), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[23]));
  CDN_flop \s1_reg_reg[24] (.clk (clk), .d (n_190), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[24]));
  CDN_flop \s1_reg_reg[25] (.clk (clk), .d (n_191), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[25]));
  CDN_flop \s1_reg_reg[26] (.clk (clk), .d (n_192), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[26]));
  CDN_flop \s1_reg_reg[27] (.clk (clk), .d (n_193), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[27]));
  CDN_flop \s1_reg_reg[28] (.clk (clk), .d (n_194), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[28]));
  CDN_flop \s1_reg_reg[29] (.clk (clk), .d (n_195), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[29]));
  CDN_flop \s1_reg_reg[30] (.clk (clk), .d (n_196), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[30]));
  CDN_flop \s1_reg_reg[31] (.clk (clk), .d (n_197), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s1_reg[31]));
  CDN_flop \c1_reg_reg[0] (.clk (clk), .d (n_198), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[0]));
  CDN_flop \c1_reg_reg[1] (.clk (clk), .d (n_199), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[1]));
  CDN_flop \c1_reg_reg[2] (.clk (clk), .d (n_200), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[2]));
  CDN_flop \c1_reg_reg[3] (.clk (clk), .d (n_201), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[3]));
  CDN_flop \c1_reg_reg[4] (.clk (clk), .d (n_202), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[4]));
  CDN_flop \c1_reg_reg[5] (.clk (clk), .d (n_203), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[5]));
  CDN_flop \c1_reg_reg[6] (.clk (clk), .d (n_204), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[6]));
  CDN_flop \c1_reg_reg[7] (.clk (clk), .d (n_205), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[7]));
  CDN_flop \c1_reg_reg[8] (.clk (clk), .d (n_206), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[8]));
  CDN_flop \c1_reg_reg[9] (.clk (clk), .d (n_207), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c1_reg[9]));
  CDN_flop \c1_reg_reg[10] (.clk (clk), .d (n_208), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[10]));
  CDN_flop \c1_reg_reg[11] (.clk (clk), .d (n_209), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[11]));
  CDN_flop \c1_reg_reg[12] (.clk (clk), .d (n_210), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[12]));
  CDN_flop \c1_reg_reg[13] (.clk (clk), .d (n_211), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[13]));
  CDN_flop \c1_reg_reg[14] (.clk (clk), .d (n_212), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[14]));
  CDN_flop \c1_reg_reg[15] (.clk (clk), .d (n_213), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[15]));
  CDN_flop \c1_reg_reg[16] (.clk (clk), .d (n_214), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[16]));
  CDN_flop \c1_reg_reg[17] (.clk (clk), .d (n_215), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[17]));
  CDN_flop \c1_reg_reg[18] (.clk (clk), .d (n_216), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[18]));
  CDN_flop \c1_reg_reg[19] (.clk (clk), .d (n_217), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[19]));
  CDN_flop \c1_reg_reg[20] (.clk (clk), .d (n_218), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[20]));
  CDN_flop \c1_reg_reg[21] (.clk (clk), .d (n_219), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[21]));
  CDN_flop \c1_reg_reg[22] (.clk (clk), .d (n_220), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[22]));
  CDN_flop \c1_reg_reg[23] (.clk (clk), .d (n_221), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[23]));
  CDN_flop \c1_reg_reg[24] (.clk (clk), .d (n_222), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[24]));
  CDN_flop \c1_reg_reg[25] (.clk (clk), .d (n_223), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[25]));
  CDN_flop \c1_reg_reg[26] (.clk (clk), .d (n_224), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[26]));
  CDN_flop \c1_reg_reg[27] (.clk (clk), .d (n_225), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[27]));
  CDN_flop \c1_reg_reg[28] (.clk (clk), .d (n_226), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[28]));
  CDN_flop \c1_reg_reg[29] (.clk (clk), .d (n_227), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[29]));
  CDN_flop \c1_reg_reg[30] (.clk (clk), .d (n_228), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[30]));
  CDN_flop \c1_reg_reg[31] (.clk (clk), .d (n_229), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c1_reg[31]));
  CDN_flop \c2_reg_reg[0] (.clk (clk), .d (1'b0), .sena (1'b0), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[0]));
  CDN_flop \c2_reg_reg[1] (.clk (clk), .d (n_230), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[1]));
  CDN_flop \c2_reg_reg[2] (.clk (clk), .d (n_231), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[2]));
  CDN_flop \c2_reg_reg[3] (.clk (clk), .d (n_232), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[3]));
  CDN_flop \c2_reg_reg[4] (.clk (clk), .d (n_233), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[4]));
  CDN_flop \c2_reg_reg[5] (.clk (clk), .d (n_234), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[5]));
  CDN_flop \c2_reg_reg[6] (.clk (clk), .d (n_235), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[6]));
  CDN_flop \c2_reg_reg[7] (.clk (clk), .d (n_236), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[7]));
  CDN_flop \c2_reg_reg[8] (.clk (clk), .d (n_237), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[8]));
  CDN_flop \c2_reg_reg[9] (.clk (clk), .d (n_238), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (c2_reg[9]));
  CDN_flop \c2_reg_reg[10] (.clk (clk), .d (n_239), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[10]));
  CDN_flop \c2_reg_reg[11] (.clk (clk), .d (n_240), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[11]));
  CDN_flop \c2_reg_reg[12] (.clk (clk), .d (n_241), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[12]));
  CDN_flop \c2_reg_reg[13] (.clk (clk), .d (n_242), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[13]));
  CDN_flop \c2_reg_reg[14] (.clk (clk), .d (n_243), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[14]));
  CDN_flop \c2_reg_reg[15] (.clk (clk), .d (n_244), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[15]));
  CDN_flop \c2_reg_reg[16] (.clk (clk), .d (n_245), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[16]));
  CDN_flop \c2_reg_reg[17] (.clk (clk), .d (n_246), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[17]));
  CDN_flop \c2_reg_reg[18] (.clk (clk), .d (n_247), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[18]));
  CDN_flop \c2_reg_reg[19] (.clk (clk), .d (n_248), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[19]));
  CDN_flop \c2_reg_reg[20] (.clk (clk), .d (n_249), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[20]));
  CDN_flop \c2_reg_reg[21] (.clk (clk), .d (n_250), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[21]));
  CDN_flop \c2_reg_reg[22] (.clk (clk), .d (n_251), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[22]));
  CDN_flop \c2_reg_reg[23] (.clk (clk), .d (n_252), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[23]));
  CDN_flop \c2_reg_reg[24] (.clk (clk), .d (n_253), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[24]));
  CDN_flop \c2_reg_reg[25] (.clk (clk), .d (n_254), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[25]));
  CDN_flop \c2_reg_reg[26] (.clk (clk), .d (n_255), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[26]));
  CDN_flop \c2_reg_reg[27] (.clk (clk), .d (n_256), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[27]));
  CDN_flop \c2_reg_reg[28] (.clk (clk), .d (n_257), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[28]));
  CDN_flop \c2_reg_reg[29] (.clk (clk), .d (n_258), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[29]));
  CDN_flop \c2_reg_reg[30] (.clk (clk), .d (n_259), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[30]));
  CDN_flop \c2_reg_reg[31] (.clk (clk), .d (n_260), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (c2_reg[31]));
  CDN_flop \s_reg_reg[0] (.clk (clk), .d (s1_reg[0]), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[0]_813 ));
  CDN_flop \s_reg_reg[1] (.clk (clk), .d (n_262), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[1]_814 ));
  CDN_flop \s_reg_reg[2] (.clk (clk), .d (n_263), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[2]_815 ));
  CDN_flop \s_reg_reg[3] (.clk (clk), .d (n_264), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[3]_816 ));
  CDN_flop \s_reg_reg[4] (.clk (clk), .d (n_265), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[4]_817 ));
  CDN_flop \s_reg_reg[5] (.clk (clk), .d (n_266), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[5]_818 ));
  CDN_flop \s_reg_reg[6] (.clk (clk), .d (n_267), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[6]_819 ));
  CDN_flop \s_reg_reg[7] (.clk (clk), .d (n_268), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[7]_820 ));
  CDN_flop \s_reg_reg[8] (.clk (clk), .d (n_269), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[8]_821 ));
  CDN_flop \s_reg_reg[9] (.clk (clk), .d (n_270), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[9]_822 ));
  CDN_flop \s_reg_reg[10] (.clk (clk), .d (n_271), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[10]_823 ));
  CDN_flop \s_reg_reg[11] (.clk (clk), .d (n_272), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[11]_824 ));
  CDN_flop \s_reg_reg[12] (.clk (clk), .d (n_273), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[12]_825 ));
  CDN_flop \s_reg_reg[13] (.clk (clk), .d (n_274), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[13]_826 ));
  CDN_flop \s_reg_reg[14] (.clk (clk), .d (n_275), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[14]_827 ));
  CDN_flop \s_reg_reg[15] (.clk (clk), .d (n_276), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[15]_828 ));
  CDN_flop \s_reg_reg[16] (.clk (clk), .d (n_277), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[16]_829 ));
  CDN_flop \s_reg_reg[17] (.clk (clk), .d (n_278), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[17]_830 ));
  CDN_flop \s_reg_reg[18] (.clk (clk), .d (n_279), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[18]_831 ));
  CDN_flop \s_reg_reg[19] (.clk (clk), .d (n_280), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[19]_832 ));
  CDN_flop \s_reg_reg[20] (.clk (clk), .d (n_281), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[20]_833 ));
  CDN_flop \s_reg_reg[21] (.clk (clk), .d (n_282), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[21]_834 ));
  CDN_flop \s_reg_reg[22] (.clk (clk), .d (n_283), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[22]_835 ));
  CDN_flop \s_reg_reg[23] (.clk (clk), .d (n_284), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[23]_836 ));
  CDN_flop \s_reg_reg[24] (.clk (clk), .d (n_285), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[24]_837 ));
  CDN_flop \s_reg_reg[25] (.clk (clk), .d (n_286), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[25]_838 ));
  CDN_flop \s_reg_reg[26] (.clk (clk), .d (n_287), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[26]_839 ));
  CDN_flop \s_reg_reg[27] (.clk (clk), .d (n_288), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[27]_840 ));
  CDN_flop \s_reg_reg[28] (.clk (clk), .d (n_289), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[28]_841 ));
  CDN_flop \s_reg_reg[29] (.clk (clk), .d (n_290), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[29]_842 ));
  CDN_flop \s_reg_reg[30] (.clk (clk), .d (n_291), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[30]_843 ));
  CDN_flop \s_reg_reg[31] (.clk (clk), .d (n_292), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[31]_844 ));
  CDN_flop \s_reg_reg[32] (.clk (clk), .d (n_293), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\s_reg[32]_845 ));
  CDN_flop cout_reg_reg(.clk (clk), .d (n_261), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (cout_reg_912));
  CDN_flop \s_reg[0] (.clk (clk), .d (\s_reg[0]_813 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[0]));
  CDN_flop \s_reg[1] (.clk (clk), .d (\s_reg[1]_814 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[1]));
  CDN_flop \s_reg[2] (.clk (clk), .d (\s_reg[2]_815 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[2]));
  CDN_flop \s_reg[3] (.clk (clk), .d (\s_reg[3]_816 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[3]));
  CDN_flop \s_reg[4] (.clk (clk), .d (\s_reg[4]_817 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[4]));
  CDN_flop \s_reg[5] (.clk (clk), .d (\s_reg[5]_818 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[5]));
  CDN_flop \s_reg[6] (.clk (clk), .d (\s_reg[6]_819 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[6]));
  CDN_flop \s_reg[7] (.clk (clk), .d (\s_reg[7]_820 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[7]));
  CDN_flop \s_reg[8] (.clk (clk), .d (\s_reg[8]_821 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[8]));
  CDN_flop \s_reg[9] (.clk (clk), .d (\s_reg[9]_822 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[9]));
  CDN_flop \s_reg[10] (.clk (clk), .d (\s_reg[10]_823 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[10]));
  CDN_flop \s_reg[11] (.clk (clk), .d (\s_reg[11]_824 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[11]));
  CDN_flop \s_reg[12] (.clk (clk), .d (\s_reg[12]_825 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[12]));
  CDN_flop \s_reg[13] (.clk (clk), .d (\s_reg[13]_826 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[13]));
  CDN_flop \s_reg[14] (.clk (clk), .d (\s_reg[14]_827 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[14]));
  CDN_flop \s_reg[15] (.clk (clk), .d (\s_reg[15]_828 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[15]));
  CDN_flop \s_reg[16] (.clk (clk), .d (\s_reg[16]_829 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[16]));
  CDN_flop \s_reg[17] (.clk (clk), .d (\s_reg[17]_830 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[17]));
  CDN_flop \s_reg[18] (.clk (clk), .d (\s_reg[18]_831 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[18]));
  CDN_flop \s_reg[19] (.clk (clk), .d (\s_reg[19]_832 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[19]));
  CDN_flop \s_reg[20] (.clk (clk), .d (\s_reg[20]_833 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[20]));
  CDN_flop \s_reg[21] (.clk (clk), .d (\s_reg[21]_834 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[21]));
  CDN_flop \s_reg[22] (.clk (clk), .d (\s_reg[22]_835 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[22]));
  CDN_flop \s_reg[23] (.clk (clk), .d (\s_reg[23]_836 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[23]));
  CDN_flop \s_reg[24] (.clk (clk), .d (\s_reg[24]_837 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[24]));
  CDN_flop \s_reg[25] (.clk (clk), .d (\s_reg[25]_838 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[25]));
  CDN_flop \s_reg[26] (.clk (clk), .d (\s_reg[26]_839 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[26]));
  CDN_flop \s_reg[27] (.clk (clk), .d (\s_reg[27]_840 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[27]));
  CDN_flop \s_reg[28] (.clk (clk), .d (\s_reg[28]_841 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[28]));
  CDN_flop \s_reg[29] (.clk (clk), .d (\s_reg[29]_842 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[29]));
  CDN_flop \s_reg[30] (.clk (clk), .d (\s_reg[30]_843 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[30]));
  CDN_flop \s_reg[31] (.clk (clk), .d (\s_reg[31]_844 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[31]));
  CDN_flop \s_reg[32] (.clk (clk), .d (\s_reg[32]_845 ), .sena (1'b1),
       .aclr (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (s[32]));
  CDN_flop cout_reg(.clk (clk), .d (cout_reg_912), .sena (1'b1), .aclr
       (n_165), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (cout));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
