
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: Jul 31 2024 09:55:33

// Verification Directory fv/BK256_ver1 

module pg16(A, B, pg15, pg14, pg13, pg12, pg11, pg10, pg9, pg8, pg7,
     pg6, pg5, pg4, pg3, pg2, pg1, pg0);
  input [15:0] A, B;
  output [1:0] pg15, pg14, pg13, pg12, pg11, pg10, pg9, pg8, pg7, pg6,
       pg5, pg4, pg3, pg2, pg1, pg0;
  wire [15:0] A, B;
  wire [1:0] pg15, pg14, pg13, pg12, pg11, pg10, pg9, pg8, pg7, pg6,
       pg5, pg4, pg3, pg2, pg1, pg0;
  and and0 (pg0[0], A[0], B[0]);
  xor xor0 (pg0[1], A[0], B[0]);
  and and1 (pg1[0], A[1], B[1]);
  xor xor1 (pg1[1], A[1], B[1]);
  and and2 (pg2[0], A[2], B[2]);
  xor xor2 (pg2[1], A[2], B[2]);
  and and3 (pg3[0], A[3], B[3]);
  xor xor3 (pg3[1], A[3], B[3]);
  and and4 (pg4[0], A[4], B[4]);
  xor xor4 (pg4[1], A[4], B[4]);
  and and5 (pg5[0], A[5], B[5]);
  xor xor5 (pg5[1], A[5], B[5]);
  and and6 (pg6[0], A[6], B[6]);
  xor xor6 (pg6[1], A[6], B[6]);
  and and7 (pg7[0], A[7], B[7]);
  xor xor7 (pg7[1], A[7], B[7]);
  and and8 (pg8[0], A[8], B[8]);
  xor xor8 (pg8[1], A[8], B[8]);
  and and9 (pg9[0], A[9], B[9]);
  xor xor9 (pg9[1], A[9], B[9]);
  and and10 (pg10[0], A[10], B[10]);
  xor xor10 (pg10[1], A[10], B[10]);
  and and11 (pg11[0], A[11], B[11]);
  xor xor11 (pg11[1], A[11], B[11]);
  and and12 (pg12[0], A[12], B[12]);
  xor xor12 (pg12[1], A[12], B[12]);
  and and13 (pg13[0], A[13], B[13]);
  xor xor13 (pg13[1], A[13], B[13]);
  and and14 (pg14[0], A[14], B[14]);
  xor xor14 (pg14[1], A[14], B[14]);
  and and15 (pg15[0], A[15], B[15]);
  xor xor15 (pg15[1], A[15], B[15]);
endmodule

module GrayCell(pg, pg0, pgo);
  input [1:0] pg;
  input pg0;
  output pgo;
  wire [1:0] pg;
  wire pg0;
  wire pgo;
  wire and_out;
  and and1 (and_out, pg0, pg[1]);
  or or1 (pgo, pg[0], and_out);
endmodule

module BlackCell(pg, pg0, pgo);
  input [1:0] pg, pg0;
  output [1:0] pgo;
  wire [1:0] pg, pg0;
  wire [1:0] pgo;
  wire and1out;
  and and1 (and1out, pg0[0], pg[1]);
  or or1 (pgo[0], and1out, pg[0]);
  and and2 (pgo[1], pg[1], pg0[1]);
endmodule

module xor16(A, B, S);
  input [15:0] A, B;
  output [15:0] S;
  wire [15:0] A, B;
  wire [15:0] S;
  xor xor0 (S[0], A[0], B[0]);
  xor xor1 (S[1], A[1], B[1]);
  xor xor2 (S[2], A[2], B[2]);
  xor xor3 (S[3], A[3], B[3]);
  xor xor4 (S[4], A[4], B[4]);
  xor xor5 (S[5], A[5], B[5]);
  xor xor6 (S[6], A[6], B[6]);
  xor xor7 (S[7], A[7], B[7]);
  xor xor8 (S[8], A[8], B[8]);
  xor xor9 (S[9], A[9], B[9]);
  xor xor10 (S[10], A[10], B[10]);
  xor xor11 (S[11], A[11], B[11]);
  xor xor12 (S[12], A[12], B[12]);
  xor xor13 (S[13], A[13], B[13]);
  xor xor14 (S[14], A[14], B[14]);
  xor xor15 (S[15], A[15], B[15]);
endmodule

module BrentKung(A, B, Cin, S, Cout);
  input [15:0] A, B;
  input Cin;
  output [15:0] S;
  output Cout;
  wire [15:0] A, B;
  wire Cin;
  wire [15:0] S;
  wire Cout;
  wire [1:0] r1c16;
  wire [1:0] r1c15;
  wire [1:0] r1c14;
  wire [1:0] r1c13;
  wire [1:0] r1c12;
  wire [1:0] r1c11;
  wire [1:0] r1c10;
  wire [1:0] r1c9;
  wire [1:0] r1c8;
  wire [1:0] r1c7;
  wire [1:0] r1c6;
  wire [1:0] r1c5;
  wire [1:0] r1c4;
  wire [1:0] r1c3;
  wire [1:0] r1c2;
  wire [1:0] r1c1;
  wire [1:0] r2c3;
  wire [1:0] r2c5;
  wire [1:0] r2c7;
  wire [1:0] r2c9;
  wire [1:0] r2c11;
  wire [1:0] r2c13;
  wire [1:0] r2c15;
  wire [1:0] r3c15;
  wire [1:0] r3c11;
  wire [1:0] r3c7;
  wire [1:0] r4c15;
  wire r2c1, r3c3, r4c7, r5c11, r5c15, r6c5, r6c9, r6c13;
  wire r7c2, r7c4, r7c6, r7c8, r7c10, r7c12, r7c14;
  pg16 ipg16(.A (A), .B (B), .pg15 (r1c16), .pg14 (r1c15), .pg13
       (r1c14), .pg12 (r1c13), .pg11 (r1c12), .pg10 (r1c11), .pg9
       (r1c10), .pg8 (r1c9), .pg7 (r1c8), .pg6 (r1c7), .pg5 (r1c6),
       .pg4 (r1c5), .pg3 (r1c4), .pg2 (r1c3), .pg1 (r1c2), .pg0 (r1c1));
  GrayCell blockr1c1(.pg (r1c1), .pg0 (Cin), .pgo (r2c1));
  BlackCell blockr1c3(.pg (r1c3), .pg0 (r1c2), .pgo (r2c3));
  BlackCell blockr1c5(.pg (r1c5), .pg0 (r1c4), .pgo (r2c5));
  BlackCell blockr1c7(.pg (r1c7), .pg0 (r1c6), .pgo (r2c7));
  BlackCell blockr1c9(.pg (r1c9), .pg0 (r1c8), .pgo (r2c9));
  BlackCell blockr1c11(.pg (r1c11), .pg0 (r1c10), .pgo (r2c11));
  BlackCell blockr1c13(.pg (r1c13), .pg0 (r1c12), .pgo (r2c13));
  BlackCell blockr1c15(.pg (r1c15), .pg0 (r1c14), .pgo (r2c15));
  BlackCell blockr2c15(.pg (r2c15), .pg0 (r2c13), .pgo (r3c15));
  BlackCell blockr2c11(.pg (r2c11), .pg0 (r2c9), .pgo (r3c11));
  BlackCell blockr2c7(.pg (r2c7), .pg0 (r2c5), .pgo (r3c7));
  GrayCell blockr2c3(.pg (r2c3), .pg0 (r2c1), .pgo (r3c3));
  GrayCell blockr3c7(.pg (r3c7), .pg0 (r3c3), .pgo (r4c7));
  BlackCell blockr3c15(.pg (r3c15), .pg0 (r3c11), .pgo (r4c15));
  GrayCell blockr6c11(.pg (r3c11), .pg0 (r4c7), .pgo (r5c11));
  GrayCell blockr4c15(.pg (r4c15), .pg0 (r4c7), .pgo (r5c15));
  GrayCell blockr5c5(.pg (r2c5), .pg0 (r3c3), .pgo (r6c5));
  GrayCell blockr5c9(.pg (r2c9), .pg0 (r4c7), .pgo (r6c9));
  GrayCell blockr5c13(.pg (r2c13), .pg0 (r5c11), .pgo (r6c13));
  GrayCell blockr6c2(.pg (r1c2), .pg0 (r2c1), .pgo (r7c2));
  GrayCell blockr6c4(.pg (r1c4), .pg0 (r3c3), .pgo (r7c4));
  GrayCell blockr6c6(.pg (r1c6), .pg0 (r6c5), .pgo (r7c6));
  GrayCell blockr6c8(.pg (r1c8), .pg0 (r4c7), .pgo (r7c8));
  GrayCell blockr6c10(.pg (r1c10), .pg0 (r6c9), .pgo (r7c10));
  GrayCell blockr6c12(.pg (r1c12), .pg0 (r5c11), .pgo (r7c12));
  GrayCell blockr6c14(.pg (r1c14), .pg0 (r6c13), .pgo (r7c14));
  xor16 xor16_1(.A ({r5c15, r7c14, r6c13, r7c12, r5c11, r7c10, r6c9,
       r7c8, r4c7, r7c6, r6c5, r7c4, r3c3, r7c2, r2c1, Cin}), .B
       ({r1c16[1], r1c15[1], r1c14[1], r1c13[1], r1c12[1], r1c11[1],
       r1c10[1], r1c9[1], r1c8[1], r1c7[1], r1c6[1], r1c5[1], r1c4[1],
       r1c3[1], r1c2[1], r1c1[1]}), .S (S));
  GrayCell genCout(.pg (r1c16), .pg0 (r5c15), .pgo (Cout));
endmodule

module BK256_ver1(A, B, Ci, S, Co);
  input [255:0] A, B;
  input Ci;
  output [255:0] S;
  output Co;
  wire [255:0] A, B;
  wire Ci;
  wire [255:0] S;
  wire Co;
  wire \Cout[0] , \Cout[1] , \Cout[2] , \Cout[3] , \Cout[4] , \Cout[5]
       , \Cout[6] , \Cout[7] ;
  wire \Cout[8] , \Cout[9] , \Cout[10] , \Cout[11] , \Cout[12] ,
       \Cout[13] , \Cout[14] ;
  BrentKung adder0(.A (A[15:0]), .B (B[15:0]), .Cin (1'b0), .S
       (S[15:0]), .Cout (\Cout[0] ));
  BrentKung adder1(.A (A[31:16]), .B (B[31:16]), .Cin (\Cout[0] ), .S
       (S[31:16]), .Cout (\Cout[1] ));
  BrentKung adder2(.A (A[47:32]), .B (B[47:32]), .Cin (\Cout[1] ), .S
       (S[47:32]), .Cout (\Cout[2] ));
  BrentKung adder3(.A (A[63:48]), .B (B[63:48]), .Cin (\Cout[2] ), .S
       (S[63:48]), .Cout (\Cout[3] ));
  BrentKung adder4(.A (A[79:64]), .B (B[79:64]), .Cin (\Cout[3] ), .S
       (S[79:64]), .Cout (\Cout[4] ));
  BrentKung adder5(.A (A[95:80]), .B (B[95:80]), .Cin (\Cout[4] ), .S
       (S[95:80]), .Cout (\Cout[5] ));
  BrentKung adder6(.A (A[111:96]), .B (B[111:96]), .Cin (\Cout[5] ), .S
       (S[111:96]), .Cout (\Cout[6] ));
  BrentKung adder7(.A (A[127:112]), .B (B[127:112]), .Cin (\Cout[6] ),
       .S (S[127:112]), .Cout (\Cout[7] ));
  BrentKung adder8(.A (A[143:128]), .B (B[143:128]), .Cin (\Cout[7] ),
       .S (S[143:128]), .Cout (\Cout[8] ));
  BrentKung adder9(.A (A[159:144]), .B (B[159:144]), .Cin (\Cout[8] ),
       .S (S[159:144]), .Cout (\Cout[9] ));
  BrentKung adder10(.A (A[175:160]), .B (B[175:160]), .Cin (\Cout[9] ),
       .S (S[175:160]), .Cout (\Cout[10] ));
  BrentKung adder11(.A (A[191:176]), .B (B[191:176]), .Cin (\Cout[10]
       ), .S (S[191:176]), .Cout (\Cout[11] ));
  BrentKung adder12(.A (A[207:192]), .B (B[207:192]), .Cin (\Cout[11]
       ), .S (S[207:192]), .Cout (\Cout[12] ));
  BrentKung adder13(.A (A[223:208]), .B (B[223:208]), .Cin (\Cout[12]
       ), .S (S[223:208]), .Cout (\Cout[13] ));
  BrentKung adder14(.A (A[239:224]), .B (B[239:224]), .Cin (\Cout[13]
       ), .S (S[239:224]), .Cout (\Cout[14] ));
  BrentKung adder15(.A (A[255:240]), .B (B[255:240]), .Cin (\Cout[14]
       ), .S (S[255:240]), .Cout (Co));
endmodule

